stype IntCStream rec x. &{next: int^x, stop: @};

fib : int -> int -> {IntCStream}
fun a b ->
    c <- {
        case c of
            next: (
                send c b;
                d <- spawn (fib b (a + b));
                fwd d c
            ) stop: (
                close c
            )
} end;

;; c <- {
	q <- spawn (fib 0 1);
	
q.next;
    x1:int <- recv q;
	print x1;
q.next;
    x2:int <- recv q;
	print x2;
q.next;
    x3:int <- recv q;
	print x3;
q.next;
    x4:int <- recv q;
	print x4;
q.next;
    x5:int <- recv q;
	print x5;
q.next;
    x6:int <- recv q;
	print x6;
q.next;
    x7:int <- recv q;
	print x7;
q.next;
    x8:int <- recv q;
	print x8;
q.next;
    x9:int <- recv q;
	print x9;
q.next;
    x10:int <- recv q;
	print x10;
q.next;
    x11:int <- recv q;
	print x11;
q.next;
    x12:int <- recv q;
	print x12;
q.next;
    x13:int <- recv q;
	print x13;
q.next;
    x14:int <- recv q;
	print x14;
q.next;
    x15:int <- recv q;
	print x15;
q.next;
    x16:int <- recv q;
	print x16;
q.stop;
	wait q;
	close c
} ;;
